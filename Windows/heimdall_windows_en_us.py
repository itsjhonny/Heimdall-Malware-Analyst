#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import requests
import hashlib
import sys
import subprocess, platform

from os import path,system
from json import JSONDecodeError
from time import sleep


#function that checks if the user wants to scan again
def new_scan():
	a = input("\nDo you want to scan new website y/n \n")

	if a == "y" or a == "Y":
		if platform.system()=="Windows":
			subprocess.Popen("cls", shell=True).communicate()
		else:
			print("\033c", end="")
		__name__


	elif a == "n" or a == "N":		
		exit(0)

	else:
		print("invalid command")
		new_scan()




#type = 1 to websites e 2 to files
def result(_type,response):

	#get the date the binary was scanned
	print("\nDate: %s \n" %(response.json()['scan_date']))

	#get numbers of positives
	positives = response.json()['positives']

	
	print("Detected %s / %s \n\n" %(positives,response.json()['total']))
	print("Antivirus scan used: \n")



	#list the result
	resp_scan = response.json()['scans']
	for x in resp_scan:
		malware_detected = resp_scan[x]['detected']

		
		if not malware_detected: #if you don't have malware
		  
		  malware_detected = "Clean"

		  if _type == 1: #json's response to website doesn't come with the version of the scan used :( so it needs that if
		  	 print("%s\n\nResult: %s" %(x,malware_detected))

		  else:
		  	print("%s\n\nVersion: %s \nResult: %s" %(x,resp_scan[x]['version'],malware_detected))



		else:
		  #add malware type
		  malware_detected = "Malicious File "

		  if _type == 1:
		  	print("%s\n\nResult: %s\nMalware Type: %s" %(x,malware_detected,a[x]['result']))

		  else:
			  
			  print("%s\n\nVersion: %s \nResult: %s\nMalware Type: %s" %(x,resp_scan[x]['version'],malware_detected,resp_scan[x]['result']))


		print("--------------------------------------------------------")


	#call function that checks if user wants to scan again
	new_scan()




def is_website(_input):

	url = "https://www.virustotal.com/vtapi/v2/url/"
	apikey = '4e3202fdbe953d628f650229af5b3eb49cd46b2d3bfe5546ae3c5fa48b554e0c'


	#function to check every 20 if the website has been scanned		
	def check():
		print("Please, wait")
		sleep(20)

		url = 'https://www.virustotal.com/vtapi/v2/url/report'

		params = {'apikey': apikey, 'resource':_input}

		try:
			response = requests.get(url, params=params)

			if response.json()['response_code'] == 1:
				result(1,response)

			else:
				check()


		except JSONDecodeError:
			check()


	#function that sends the site to scan
	def send_website():
		print("Site not found in database\nWill be sent for analysis")
				
		
		params = {'apikey': apikey, 'url':_input}
		
		try:
			response = requests.post(url + "scan", data=params)
			if response.json()['verbose_msg'] != "Scan request successfully queued, come back later for the report":
				print("Failed to send website\nTrying in 5 seconds\nPlease wait")
				sleep(5)
				send_website()

			else:
				print("\nSite submitted successfully. \nWill be analyzed\nThe estimated time is 20 seconds")
				check()

		except JSONDecodeError:
				print("Failed to send website\nTrying in 5 seconds\nPlease wait")
				sleep(5)
				send_website()
				

		print("\nSite submitted successfully. \nWill be analyzed\nThe estimated time is 20 seconds")	
	

	#check if the site is in the database
	def check_in_database():
		params = {'apikey': apikey, 'resource':_input}

		try:
			response = requests.post(url + "report", data=params)
			#if the code is 1 and because the database has the signature and goes to function to display the result. If it is 0 it sends the binary
			if response.json()['response_code'] == 1:
				result(1,response)

			else:
				send_website() #Sen website to scan

		except JSONDecodeError:
			print("Failed to check website in database\nTrying in 5 seconds\nPlease wait")
			sleep(5)
			check_in_database()	
		
	check_in_database()

		


def is_file(_input):
	url = 'https://www.virustotal.com/vtapi/v2/file/'
	apikey = '4e3202fdbe953d628f650229af5b3eb49cd46b2d3bfe5546ae3c5fa48b554e0c'
	hash_md5 = hashlib.md5()

	#function to check every 60 seconds if the file was scanned
	def check():		
		print("Please wait")
		sleep(60)
		
		params = {'apikey': apikey, 'resource':str(hash_md5.hexdigest())}

		try:
			response = requests.get(url + "report", params=params)

			if response.json()['response_code'] == 1:
				result(2,response)

			else:
				print("File still in analyze")
				check()


		except JSONDecodeError:
			check()

	
	#send the binary for analysis
	def send_file():
		print("File not found in database\nWill be send for analyze")

		
		params = {'apikey': apikey}

		with open(_input, "rb") as f:
			files = {'file': (str(hash_md5), f.read())}

		#variable that makes and get the answer
		try:
			response = requests.post(url + "scan", files=files, params=params)
			if response.json()['verbose_msg'] != "Scan request successfully queued, come back later for the report":
				print("Failed to send file\nNew try in 5 seconds\nPlease wait")
				sleep(5)
				send_file()

			else:
				print("\nFile uploaded successfully. \nSerá analisado em breve\nThe estimated time is 2 minutes")
				check()


		except JSONDecodeError:
			print("Failed to send file\nNew try in 5 seconds\nPlease wait")
			sleep(5)
			send_file()


	#function that checks if the binary is already in the database
	def check_in_database():
		#open the binary and get its hash_md5 then close
		with open(_input, "rb") as f:
			for x in iter(lambda: f.read(), b""):
			  hash_md5.update(x)


		params = {'apikey': apikey, 'resource': hash_md5.hexdigest()}

		try:
			response = requests.get(url+"report", params=params)
			#if the code is 1 and because the database has the signature and goes to function to display the result. If it is 0 it sends the binary
			if response.json()['response_code'] == 1:
				result(2,response)

			else:
				send_file()


		except JSONDecodeError:
			print("Failed to check file in database\nNew try in 5 seconds\nPlease wait")
			sleep(5)
			check_in_database()
			
	check_in_database()




def art():
	print(""" 
      _,.
    ,` -.)
   ( _/-\\-._
  /,|`--._,-^|            ,
  \_| |`-._/||          ,'|
    |  `-,  /|         /  /
    |     || |        /  /
     `r-._||/   __   /  /
 __,-<_     )`-/  `./  /
'  \   `---'   \   /  /
    |           |./  /
    /           //  /
\_/' \         |/  /
 |    |   _,^-'/  /
 |    , ``  (\/  /
  \,.->._    \  /
  (  /   `-._//^`
   `Y-.____(__}
    |     {__)
          ()

HEIMDALL MALWARES SCANNER -- João Pedro Guimarães

https://www.linkedin.com/in/johnpguimaraes/
https://github.com/jpvibes
https://jpvibes.github.io/

	""")
	return


def main():
	art()
	_input = input("Insert a file or website and press enter: ").replace("'","").replace(" ","")

	#check inputs
	if len(_input) <= 0:
		print("\nPlease insert a file or website\n")
		sleep(2)
		main()



	#exit scan if typed exit
	elif _input == "exit":
		sys.exit()

	else:

		#if website
		if "http://" in _input or "https://" in _input:

			#ping website
			if requests.head(_input).status_code != 404:
				is_website(_input)

			else:
				print("Failed to connect to site. Error %s\nPlease make sure the site address is correct and try again." %(requests.head(_input).status_code))
				sleep(2)
				main()
			


		#if binary
		else:

			#checks the path of the binary
			if not path.isfile(_input):
				print("\nFile not found\n")
				sleep(2)
				main()
			

			elif path.getsize(_input) < 133169152:
				is_file(_input)

			else:
				print("File too large to be analyzed")
				p = ['B', 'KB', 'MB', 'GB', 'TB', 'PB']

				def get_size(x):
				    i = 0
				    while x >= 1024 and i < len(p)-1:
				        x /= 1024.
				        i += 1
				    f = ('%.2f' % x).rstrip('0').rstrip('.')

				    print("Your file has %s %s and the limit is 127 MB\n\n" %(f, p[i]))
				    sleep(2)
				    main()

				get_size(path.getsize(_input))


				    
				


		#back to main
		main()

	




if __name__ == '__main__':
	
	if platform.system()=="Windows":
		subprocess.Popen("cls", shell=True).communicate()
	else:
		print("\033c", end="")
	main()
